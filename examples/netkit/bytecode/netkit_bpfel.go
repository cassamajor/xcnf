// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package bytecode

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadNetkit returns the embedded CollectionSpec for Netkit.
func LoadNetkit() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetkitBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Netkit: %w", err)
	}

	return spec, err
}

// LoadNetkitObjects loads Netkit and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*NetkitObjects
//	*NetkitPrograms
//	*NetkitMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadNetkitObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadNetkit()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// NetkitSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetkitSpecs struct {
	NetkitProgramSpecs
	NetkitMapSpecs
	NetkitVariableSpecs
}

// NetkitProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetkitProgramSpecs struct {
	NetkitPeer    *ebpf.ProgramSpec `ebpf:"netkit_peer"`
	NetkitPrimary *ebpf.ProgramSpec `ebpf:"netkit_primary"`
}

// NetkitMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetkitMapSpecs struct {
}

// NetkitVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetkitVariableSpecs struct {
}

// NetkitObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadNetkitObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetkitObjects struct {
	NetkitPrograms
	NetkitMaps
	NetkitVariables
}

func (o *NetkitObjects) Close() error {
	return _NetkitClose(
		&o.NetkitPrograms,
		&o.NetkitMaps,
	)
}

// NetkitMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadNetkitObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetkitMaps struct {
}

func (m *NetkitMaps) Close() error {
	return _NetkitClose()
}

// NetkitVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadNetkitObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetkitVariables struct {
}

// NetkitPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadNetkitObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetkitPrograms struct {
	NetkitPeer    *ebpf.Program `ebpf:"netkit_peer"`
	NetkitPrimary *ebpf.Program `ebpf:"netkit_primary"`
}

func (p *NetkitPrograms) Close() error {
	return _NetkitClose(
		p.NetkitPeer,
		p.NetkitPrimary,
	)
}

func _NetkitClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed netkit_bpfel.o
var _NetkitBytes []byte
